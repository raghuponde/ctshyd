MVC (Model -View -Controller) 

it is one kind of desing pattern to develop software application we follow some techniques in this pattern which makes us to write by default a very good programming practise in this .

Model : it is set of domain classes which will act as interface to data which is present behind the application so in this model i apply business rules means validation i can provide to classes which we have seen in ef using annotations ,this model can be a DAL (data access layer ) means it acts like that ,it is also called a ORM tool
means object realtional mapping toool like linq ,entity framwork so i can keep a entity framewok in model so that i s also possible.

View: user interface which renders the model in the way the user can interact with .so here for one model there can be many views so multiple views may be associiated with a model this is a presental layer we can say .This view is actually a pure html page there will be no code behind file like windows or asp.net it is pure html means only html controls will be there no asp.net controls and no server controls will be there .


Controller : it will recives the request from the user from the view or user interface and after taking taking the request based on type of request  of the user the controller will do modification in databse using the model and after doing the modification the response which it will get will be submitted to end user . it handles complex operations .

 it is one type of class we can say which is having a suffix as controller and in that class some methods which we can action methods are written as per the request .

In controllers two methods we will use more which is get and post 

get means just showing the form is get means just  displaying the form 

for example : insert form in that one form will be shown with text boxex etc and save option button 

post measn after filling the data when u click save button post metod is called 

they will be having same name but one attibute on the top of the function will be there which tells 
whether it is post or get ...
[get]
insertcustomer()
{



}



http://localhost/featured3/index.html

http :yahoo.com /xyz/pqr  in web application it means in yahoo server go the website xyz and in that open page pqr.html 

in mvc 

above url means 

xyz is controller class and pqr is not a html page but it is a function inside a controller class 

class  xyz
{

public return type pqr(23)
{

here logic code u will write in the function 

and u will return some value 

}

}

right now i am interacting by using a url where i specify controlername /actionmetod /paramter going inside the 
method 

i am not providing any link or button to the user so that he can interact with the application 

I am calling a function of controller using a url and and i am seeing a correspnding view generated by controller 

now i will provide a view in that view user will request some thing and based on request the function is called and and its view is executed like that i want to do 

  ﻿using Microsoft.AspNetCore.Mvc;
using MvcFirstExample.Models;
using System.Diagnostics;

namespace MvcFirstExample.Controllers
{
	public class HomeController : Controller
	{
		private readonly ILogger<HomeController> _logger;

		public HomeController(ILogger<HomeController> logger)
		{
			_logger = logger;
		}

		public IActionResult Index()
		{
			return View();
		}

		public IActionResult Privacy()
		{
			return View();
		}

		[ResponseCache(Duration = 0, Location = ResponseCacheLocation.None, NoStore = true)]
		public IActionResult Error()
		{
			return View(new ErrorViewModel { RequestId = Activity.Current?.Id ?? HttpContext.TraceIdentifier });
		}

		public string sampledemo1()
		{
			return "RaviKumar";
		}

		public string sampledemo2(int  age,string name)
		{
			return "The Name is " + name + " and having age as of" + age;
		}

		public ActionResult sampledemo4()
		{
			int age = 23;
			string name = "kiran";
			ViewBag.Age = age;
			ViewBag.Name = name;
			return View();
		}

		public ActionResult sampledemo5(int age,string name ,string loc)
		{
			ViewBag.Message = name + " is living in " + loc + "having age" + age;
			return View();
		}

		public ActionResult HomeDisplay()
		{
			return View();
		}


	}
}

sending data from controller to view :
--------------------------------------------------
earlier what we have seen is that we send data in viewbag which are nothing but dynamic properties from controller to view and here i had not passed the data inside the view just declared in function body of controller 
and in that function body what i have declared i had used it in view .



Now I will declare Model object and one time i will send one object and another time collection of same object into the view and third i will send a mixture of two classes objects into a view means in a single view there will be a
mutiple models so at that we need to define a viewmodel  it is given a different name but inside that u can define different classes and use them by what name u have specfied to that viewmodel


1) sendingsingleobject to view 

2) sedning collection of objects to view 

3) sending combination of more than one obect to a view means 

﻿using Microsoft.AspNetCore.Mvc;
using MvcFirstExample.Models;
using System.Diagnostics;

namespace MvcFirstExample.Controllers
{
	public class HomeController : Controller
	{
		private readonly ILogger<HomeController> _logger;

		public HomeController(ILogger<HomeController> logger)
		{
			_logger = logger;
		}

		public IActionResult Index()
		{
			return View();
		}

		public IActionResult Privacy()
		{
			return View();
		}

		[ResponseCache(Duration = 0, Location = ResponseCacheLocation.None, NoStore = true)]
		public IActionResult Error()
		{
			return View(new ErrorViewModel { RequestId = Activity.Current?.Id ?? HttpContext.TraceIdentifier });
		}

		public string sampledemo1()
		{
			return "RaviKumar";
		}

		public string sampledemo2(int  age,string name)
		{
			return "The Name is " + name + " and having age as of" + age;
		}

		public ActionResult sampledemo4()
		{
			int age = 23;
			string name = "kiran";
			ViewBag.Age = age;
			ViewBag.Name = name;
			return View();
		}

		public ActionResult sampledemo5(int age,string name ,string loc)
		{
			ViewBag.Message = name + " is living in " + loc + "having age" + age;
			return View();
		}

		public ActionResult HomeDisplay()
		{
			return View();
		}
		Employee emp = new Employee()
		{
			EmployeeID = 101,
			EmpName = "ravi",
			Salary = 23000

		};

        List<Employee> emplist = new List<Employee>()
            {

                new Employee{EmployeeID=101,EmpName="ravi",Salary=23000},

                new Employee{EmployeeID=102,EmpName="sita",Salary=43000},

                new Employee{EmployeeID=103,EmpName="mahesh",Salary=53000},

                new Employee{EmployeeID=104,EmpName="radhika",Salary=22000},


            };
        List<Department> deptlist = new List<Department>()
            {
                new Department{DeptId=10,DeptName="Sales"},
                new Department{DeptId=20,DeptName="HR"},
                new Department{DeptId=30,DeptName="Software"}
            };
        public ActionResult SingleObjectPassing()
		{
			return View(emp); //single object passed here 
		}

		public ActionResult collectionofobjects()
		{
			return View(emplist);// here collection is sent 
		}
		public ActionResult searchemp(int empid)
		{
			Employee emp = (from e1 in emplist where e1.EmployeeID == empid select e1).FirstOrDefault();
			return View(emp);
		}

		public ActionResult viewmodeldemo(int empid)
		{
			var query1 = deptlist.ToList();

			Employee emp=emplist.Where(x=>x.EmployeeID==empid).FirstOrDefault();
			var query2 = emp;

			EmpDeptViewModel obj = new EmpDeptViewModel()
			{
				deptlist = query1,
				emp = query2,
				date = DateTime.Now
			};

			return View(obj);
		}

	}
}

@model IEnumerable<MvcFirstExample.Models.Employee>
@{
    ViewData["Title"] = "collectionofobjects";
}

<h1>collectionofobjects</h1>

<table border="1" cellpadding="1" cellspacing="1">
    <tr>
        <th>EmployeeID</th>
        <th>Empname</th>
        <th>EmpSalary</th>
    </tr>
  
        @foreach(Employee emp in Model)
        {
        <tr>
            <td>@emp.EmployeeID</td>
            <td>@emp.EmpName</td>
            <td>@emp.Salary</td>
            <td>@Html.ActionLink("details","searchemp",new {empid=emp.EmployeeID})</td>
        </tr>
        }
      
   
</table>



@model MvcFirstExample.Models.Employee
@{
    ViewData["Title"] = "searchemp";
}

<h1>searchemp</h1>

  <table border="1" cellpadding="0" cellspacing="0">
        <tr>
            <th>EmployeeID</th>
            <th>Empname</th>
            <th>EmpSalary</th>
        </tr>
        <tr>
            <td>@Model.EmployeeID</td>
            <td>@Model.EmpName</td>
            <td>@Model.Salary</td>
        </tr>
    </table>

@model MvcFirstExample.Models.Employee
@{
    Layout = null;
}
<!DOCTYPE html>
<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>SingleObjectPassing</title>
</head>
<body>
    <table border="1" cellpadding="0" cellspacing="0">
        <tr>
            <th>EmployeeID</th>
            <th>Empname</th>
            <th>EmpSalary</th>
        </tr>
        <tr>
            <td>@Model.EmployeeID</td>
            <td>@Model.EmpName</td>
            <td>@Model.Salary</td>
        </tr>
    </table>
</body>
</html>


@model MvcFirstExample.Models.EmpDeptViewModel
@{
    ViewData["Title"] = "viewmodeldemo";
}

<h1>viewmodeldemo</h1>

<h2> Date : @Model.date</h2>

<h3>dept details </h3>
<table border="1" cellpadding="1" cellspacing="1">
    <tr>
        <th>DeptID</th>
        <th>Deptname</th>
    

    @foreach (Department dept in Model.deptlist)
    {
            <tr>
                <td>@dept.DeptId</td>
                <td>@dept.DeptName</td>
            </tr>
    }


</table>
<h3> Search emp details</h3>
<table border="1" cellpadding="0" cellspacing="0">
        <tr>
            <th>EmployeeID</th>
            <th>Empname</th>
            <th>EmpSalary</th>
        </tr>
        @if(Model.emp!=null)
    {
        <tr>
            <td>@Model.emp.EmployeeID</td>
            <td>@Model.emp.EmpName</td>
            <td>@Model.emp.Salary</td>
        </tr>
    }
    else
    {
        <tr>
            <td>There is no employee with this id</td>
        </tr>
    }

 </table>
homedisplay
------------

@{
    Layout = null;
}

<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>Title goes here</title>
    <meta name="description" content="Description of your site goes here">
    <meta name="keywords" content="keyword1, keyword2, keyword3">
    <link href="~/css/style.css" rel="stylesheet" type="text/css">
</head>
<body>
    <div class="page-in">
        <div class="page">
            <div class="main">
                <div class="header">
                    <div class="header-top">
                        <h1>Company <span>Name</span></h1>
                    </div>
                    <div class="header-bottom">
                        <h2>
                            Lorem Ipsum is simply dummy text<br>
                            of the typesetting industry.
                        </h2>
                    </div>
                    <div class="topmenu">
                        <ul>
                            <li style="background: transparent none repeat scroll 0% 50%; -moz-background-clip: initial; -moz-background-origin: initial; -moz-background-inline-policy: initial; padding-left: 0px;"><a href="index.html"><span>Home</span></a></li>
                            <li><a href="#"><span>About&nbsp;us</span></a></li>
                            <li><a href="#"><span>What's&nbsp;new</span></a></li>
                            <li><a href="#"><span>Services</span></a></li>
                            <li><a href="#"><span>Contact</span></a></li>
                            <li><a href="#"><span>Resources</span></a></li>
                            <li><a href="#"><span>Links</span></a></li>
                        </ul>
                    </div>
                </div>
                <div class="content">
                    <div class="content-left">
                        <div class="row1">
                            <h1 class="title">Welcome To <span>Our Site</span></h1>
                            <p>
                                <strong>Lorem Ipsum is simply dummy text</strong> of the printing
                                and typesetting industry. Lorem Ipsum has been the indusstandard dummy
                                text ever since the 1500s, when an unknown printer took a galley of
                                type and scrambleto make a type specimen book.
                            </p>
                            <p>&nbsp;</p>
                            <p>
                                It has survived not only five centuries, but also the leap into
                                electronic typesetting, remaining essentially unchanged. It was
                                popularised in the 1960s with the release
                            </p>
                            <ul class="list1">
                                <li>of Letraset sheets containing</li>
                                <li>Lorem Ipsum passages,</li>
                                <li>and more recently with desktop</li>
                            </ul>
                            <p>
                                &nbsp;<br>
                                <strong>Lorem Ipsum is simply dummy text</strong> of the printing
                                and typesetting industry. Lorem Ipsum has been the industry's standard
                                dummy text ever since the 1500s, when an unknown printer took a galley
                                of type and scrambled it.<br>
                                <br>
                            </p>
                        </div>
                        <div class="row2">
                            <h2 class="subtitle">About <span>Us</span></h2>
                            <p>
                                <strong>Lorem Ipsum is simply dummy text</strong> of the printing
                                and typesetting industry. Lorem Ipsum has been the aaaa industry's
                                standard dummy text ever since the 1500s, ass as dwhen an unknasdown
                                printer took a galley of type and scrambled it to make a type
                                speascimen book. <br>
                                It has survived not only five centuries, but also the leap into
                                electronic typesetting.and scrambled it to make a type speascimen book.
                            </p>
                            <p>&nbsp;</p>
                            <p>
                                <strong>Lorem Ipsum is simply dummy text</strong> of the printing
                                and typesetting industry. Lorem Ipsum has been the industry's standard
                                dummy text ever since the 1500s, when an unknown printer took a galley
                                of type and scrambled it to make a type specimen book.
                            </p>
                            <p>&nbsp;</p>
                            <p align="right"><a href="#" class="more">Read More</a></p>
                        </div>
                    </div>
                    <div class="content-right">
                        <div class="mainmenu">
                            <h2 class="sidebar1">Main Menu</h2>
                            <ul>
                                <li><a href="#">this is a dummy link 1</a></li>
                                <li><a href="#">this is a dummy link 2</a></li>
                                <li><a href="#">this is a dummy link 3</a></li>
                                <li><a href="#">this is a dummy link 4</a></li>
                                <li><a href="#">this is a dummy link 5</a></li>
                                <li><a href="#">this is a dummy link 6</a></li>
                                <li><a href="#">this is a dummy link 7</a></li>
                                <li><a href="#">this is a dummy link 8</a></li>
                                <li><a href="#">this is a dummy link 9</a></li>
                                <li><a href="#">this is a dummy link 10</a></li>
                            </ul>
                        </div>
                        <div class="contact">
                            <h2 class="sidebar2">Contact</h2>
                            <div class="contact-detail">
                                <p class="green"><strong>Lorem Ipsum is simply dummy text</strong></p>
                                <p>
                                    <strong>Adress :</strong> Lorem Ipsum has been the<br>
                                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dummy
                                    text the 1500s,
                                </p>
                                <p>
                                    <strong>E-mail :</strong> &nbsp;&nbsp;&nbsp;when an unknown printer
                                    took a
                                </p>
                                <p>
                                    <strong>Phone :</strong> &nbsp;&nbsp;&nbsp;00-0000000000<br>
                                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;000-0000-0000
                                </p>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="footer">
                    <p>
                        &copy; Copyright 2014. Designed by <a target="_blank" href="http://www.htmltemplates.net">htmltemplates.net</a>
                    </p>
                    <ul>
                        <li style="border-left: medium none;"><a href="index.html"><span>Home</span></a></li>
                        <li><a href="#"><span>About&nbsp;us</span></a></li>
                        <li><a href="#"><span>What's&nbsp;new</span></a></li>
                        <li><a href="#"><span>Services</span></a></li>
                        <li><a href="#"><span>Contact</span></a></li>
                        <li><a href="#"><span>Resources</span></a></li>
                        <li style="padding-right: 0px;"><a href="#"><span>Links</span></a></li>
                    </ul>
                </div>
            </div>
        </div>
    </div>

</body>
</html>

CRUD operation using a Model :
-----------------------------------------
Means for a model means for a class any class i want to define insert,update ,delete and read etc methods in Controller function means function for insert and function for update and all i want to write 
here i will use get and post methods and all i will validate the class means business rules also i will apply 

earlier manually i had gone into the view and written html code and embedded the model object s into it 
but now i will ask the visual studio to genrate the code for me in the view that thing is called as scafffolding.

so check program dog on this example ..

Get and Post methods are there for only insert ,update and delete functionalities


﻿using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.CodeAnalysis.VisualBasic.Syntax;
using MvcFirstExample.Models;
namespace MvcFirstExample.Controllers
{
    public class DogController : Controller
    {

        static private List<Dog> dogs = new List<Dog>();

        // GET: DogController
        public ActionResult Index()
        {
            return View(dogs);
        }

        // GET: DogController/Details/5
        public ActionResult Details(int id)
        {
            Dog d = new Dog();
            foreach(Dog dog in dogs)
            {
                if (dog.ID ==id)
                {
                    d.ID = dog.ID;
                    d.Name = dog.Name;
                    d.Age = dog.Age;
                }

            }
            return View(d);
        }

        // GET: DogController/Create
        public ActionResult Create()
        {
            return View();
        }

        // POST: DogController/Create
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult Create(Dog d)
        {
            try
            {
                if(ModelState.IsValid)
                {
                    dogs.Add(d);
                    return RedirectToAction("Index");
                }
                else
                {
                    return View("Create", d);
                }
            }
            catch(Exception ex) 
            {
                return View("Create", d);
            }
        }

        // GET: DogController/Edit/5
        public ActionResult Edit(int id)
        {
            return View();
        }

        // POST: DogController/Edit/5
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult Edit(Dog d)
        {
            try
            {
                if(!ModelState.IsValid)
                {
                    return View("Edit", d);
                }
                else
                {
                    foreach(Dog dog in dogs)
                    {
                        if(dog.ID==d.ID)
                        {
                            dog.Name = d.Name;
                            dog.Age = d.Age;
                        }

                    }
                    return RedirectToAction("Index");

                }
            }
            catch(Exception ex) 
            {
                return View("Edit", d);
            }
        }

        // GET: DogController/Delete/5
        public ActionResult Delete(int id)
        {

            Dog d = new Dog();
            foreach (Dog dog in dogs)
            {
                if (dog.ID == id)
                {
                    d.ID = dog.ID;
                    d.Name = dog.Name;
                    d.Age = dog.Age;
                }

            }
            return View(d);
        }
        [HttpGet]
        public ActionResult DirectDelete(int id)
        {
            Dog d = new Dog();
           foreach (Dog dog in dogs)
            {
                if (dog.ID ==id)
                {
                    dogs.Remove(dog);
                    break;
                }
            }
            return RedirectToAction("Index");
        }

        // POST: DogController/Delete/5
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult Delete(Dog d)
        {
            try
            {
                foreach(Dog dog in dogs)
                {
                    if(dog.ID==d.ID)
                    {
                        dogs.Remove(dog);
                        break;
                    }
                }
                return RedirectToAction("Index");
            }
            catch(Exception ex)
            {
                return View();
            }
        }
    }
}



For designing first learn bootstrap from this link 

https://www.w3schools.com/bootstrap4/

as in MVC they are using some bootstrap file 

and after learning go to this link 

https://getbootstrap.com/docs/4.6/getting-started/introduction/

and in this in search type what u want like forms ,dropdowns etc 

some code will come try to analize it and replace that code with  your desing code which u need it 


bootswatch.com is another site for taking code into desing 

Go through html helpers or stongly typed html helpers from the internet and chatGPT what are they learn it

for strongly typed create a class with properties and then write a action method of create and right click it 
and graphically create view saying add view there add model and template which u want to genrate like here create template 

and see the code of automatic generated and check it with what bootsrap which u have learned ...so there you will find lot of bootstrap code 


Best video to refer for strongly typed html helpers 


https://www.youtube.com/watch?v=yLTKwy0KZRw&t=1910s

